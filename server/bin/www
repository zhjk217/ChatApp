#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


const firebase = require('../models/FireBase');
const {
  listen
} = require('../app');
const db = firebase.database();
const ref = db.ref("server/saving-data");
const usersRef = ref.child("messages");


const io = require('socket.io')(server, {
  cors: {
    origin: "*:3001",
    methods: ["GET", "POST"],
    allowedHeaders: ["my-custom-header"],
    credentials: true
  }
});

io.on('connection', function (socket) {
  console.log(`connect ${socket.id}`);
  socket.on('enterChat', function (user) {
    console.log(`user:${user},socketid:${socket.id},enterChat`);

    usersRef.limitToLast(25).on("value", function (snapshot) {
      var list = [];
      snapshot.forEach(function (elem) {
        list.push(elem.val());
      });
      socket.emit('getMsg', list);
    });
    socket.on('msg', function (msgData) {
      //msgForAll.push(msgData);
      console.log('用戶端[' + msgData.name + ']傳來->[' + msgData.msg + ']');
      const data = {
        photoURL: msgData.photoURL,
        name: msgData.name,
        uid: msgData.uid,
        msg: msgData.msg,
      }
      usersRef.push().set(data);
      //socket接收
      //io即時回傳
    });
    socket.on('disconnect', leave);
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

function leave() {
  console.log('有人離開')
}